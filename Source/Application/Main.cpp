/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/



//===================================================================================
// Beat Surface Application
// A Real Time Percussive Stroke Detection and Classification System
//
// Georgia Tech Center for Music Technology
//===================================================================================


#include "../../JuceLibraryCode/JuceHeader.h"
#include "BeatSurfaceHeader.h"
#include "MainAppWindow.h"

//==================================================================================
class BeatSurfaceApplication  : public JUCEApplication
{
public:
    //==============================================================================
    BeatSurfaceApplication() {}

    const String getApplicationName()       { return ProjectInfo::projectName; }
    const String getApplicationVersion()    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed()       { return true; }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        // This method is where you should put your application's initialisation code..
        
        Desktop::getInstance().setOrientationsEnabled (Desktop::allOrientations);
        
        
        // Command Manager for entire application
        commandManager = new ApplicationCommandManager();
        commandManager->registerAllCommandsForTarget (this);
        
        
        // Device Manager used by entire application
        sharedAudioDeviceManager = new AudioDeviceManager();
        sharedAudioDeviceManager->initialise(BeatSurfaceBase::iNumInputChannels,
                                             BeatSurfaceBase::iNumOutputChannels, 0, true, String::empty, 0);
        
        
        
        // Place Beat Surface Interface / Engine Here ???
        
        
        // Synchronus GUI Updater
        guiUpdater      =   new GUIUpdater();
        
    
        // Global Clock
        globalClock     =   new GlobalClock();
        
        
        
        // Main Window
        mainWindow = new MainAppWindow();
    }

    void shutdown()
    {
        // Add your application's shutdown code here..
        
        mainWindow                  = nullptr;
        
        guiUpdater                  = nullptr;
        commandManager              = nullptr;
        sharedAudioDeviceManager    = nullptr;
        globalClock                 = nullptr;
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    
    
    //==============================================================================
    
    // Return the set of all commands that this target can perform..
    void getAllCommands (Array <CommandID>& commands)
    {
        const CommandID ids[] =
        {
            CommandIDs::AddClass,
            CommandIDs::DeleteClass,
            CommandIDs::CurrentClass,
            
            CommandIDs::RecordTraining,
            CommandIDs::DoneTraining,
            
//            CommandIDs::StartAudio,
//            CommandIDs::StopAudio,
//            CommandIDs::ToggleClock,
            
            CommandIDs::GoToKioskMode,
            
            StandardApplicationCommandIDs::quit
        };
        
        commands.addArray(ids, numElementsInArray(ids));
    }
    

    
    void getCommandInfo (CommandID commandID, ApplicationCommandInfo& result)
    {
        switch (commandID)
        {
            case CommandIDs::AddClass:
                result.setInfo ("Add New Class", "Adds a new class of sounds", CommandCategories::TrainCommands, 0);
                result.addDefaultKeypress ('=', ModifierKeys::commandModifier);
                break;
                
            case CommandIDs::DeleteClass:
                result.setInfo ("Delete Selected Class", "Deletes a selected class", CommandCategories::TrainCommands, 0);
                result.addDefaultKeypress ('-', ModifierKeys::commandModifier);
                break;
                
            case CommandIDs::CurrentClass:
                result.setInfo ("Select Class", "Selects the current class", CommandCategories::CommonCommands, 0);
                result.addDefaultKeypress ('t', ModifierKeys::commandModifier);
                break;
                
            case CommandIDs::RecordTraining:
                result.setInfo ("Record Training", "Start currently selected class recording", CommandCategories::TrainCommands, 0);
                result.addDefaultKeypress ('3', ModifierKeys::commandModifier);
                break;
                
            case CommandIDs::DoneTraining:
                result.setInfo ("Finished Training", "Finished currently selected training", CommandCategories::TrainCommands, 0);
                result.addDefaultKeypress ('4', ModifierKeys::commandModifier);
                break;
                
//            case CommandIDs::StartAudio:
//                result.setInfo ("Start System", "Turns on detection and classification system", CommandCategories::PlayCommands, 0);
//                result.addDefaultKeypress ('1', ModifierKeys::commandModifier);
//                break;
//                
//            case CommandIDs::StopAudio:
//                result.setInfo ("Stop System", "Turns off detection and classification system", CommandCategories::PlayCommands, 0);
//                result.addDefaultKeypress ('2', ModifierKeys::commandModifier);
//                break;
                
//            case CommandIDs::ToggleClock:
//                result.setInfo ("Toggle Metronome", "Metronome default to 120BPM", CommandCategories::CommonCommands, 0);
//                result.addDefaultKeypress (' ', ModifierKeys::noModifiers);
//                break;
                
                
            #if ! JUCE_LINUX
            case CommandIDs::GoToKioskMode:
                result.setInfo ("Show full-screen kiosk mode", String::empty, CommandCategories::CommonCommands, 0);
                result.addDefaultKeypress ('f', ModifierKeys::commandModifier);
                result.setTicked (Desktop::getInstance().getKioskModeComponent() != 0);
                break;
            #endif
                
            default:
                break;
        }
    }
    
    
    
    bool perform (const InvocationInfo& info)
    {
        switch (info.commandID)
        {
            case CommandIDs::AddClass:
                // do something
                std::cout << "@Main, Add class" << std::endl;
                break;
                
            case CommandIDs::DeleteClass:
                // do something
                std::cout << "@Main, Delete class" << std::endl;
                break;
                
            case CommandIDs::CurrentClass:
                // do something
                std::cout << "@Main, Current class" << std::endl;
                break;
                
                
                
            case CommandIDs::RecordTraining:
                // do something
                std::cout << "@Main, Record Training" << std::endl;
                break;
                
            case CommandIDs::DoneTraining:
                // do something
                std::cout << "@Main, Done Training" << std::endl;
                break;
                
                
                
//            case CommandIDs::StartAudio:
//                // do something
//                std::cout << "Start Audio" << std::endl;
//                break;
//                
//            case CommandIDs::StopAudio:
//                // do something
//                std::cout << "Stop Audio" << std::endl;
//                break;
                
//            case CommandIDs::ToggleClock:
//                return false;
//                break;
                
                
            case CommandIDs::Preferences:
                return false;
                break;
                
                
                
            #if ! JUCE_LINUX
            case CommandIDs::GoToKioskMode:
            {
//                Desktop& desktop = Desktop::getInstance();
                
//                if (desktop.getKioskModeComponent() == nullptr)
//                    desktop.setKioskModeComponent (getTopLevelComponent());
//                else
//                    desktop.setKioskModeComponent (nullptr);
                
                break;
            }
            #endif
                
            default:
                return false;
        }
        
        return true;
    }
    
    
private:
    
    ScopedPointer<MainAppWindow> mainWindow;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (BeatSurfaceApplication)
